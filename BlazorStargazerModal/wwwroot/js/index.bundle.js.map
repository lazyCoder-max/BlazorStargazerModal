{
  "version": 3,
  "sources": ["../../Npm/src/js/index.js"],
  "sourcesContent": ["let walletAvailable = false;\r\nlet dagProvider;\r\nlet ethProvider;\r\n\r\nfunction getErrorResponse(e) {\r\n    let response = {\r\n        result: null,\r\n        error: e.reason ?? e.message ?? e,\r\n        success: false\r\n    }\r\n    return JSON.stringify(response);\r\n}\r\nfunction getSuccessResponse(result) {\r\n    let response = {\r\n        result: result,\r\n        error: null,\r\n        success: true\r\n    };\r\n    return JSON.stringify(response);\r\n}\r\nfunction getSuccessResponseWithReplacer(result, replacer) {\r\n    let response = {\r\n        result: result,\r\n        error: null,\r\n        success: true\r\n    };\r\n    return JSON.stringify(response, replacer);\r\n\r\n}\r\n\r\nexport async function checkWalletAvailability() {\r\n    if (window.stargazer) {\r\n        try {\r\n            walletAvailable = true;\r\n            return getSuccessResponse(walletAvailable);\r\n        } catch (e) {\r\n            getErrorResponse(e);\r\n        }\r\n    }\r\n    walletAvailable = false;\r\n    return getSuccessResponse(walletAvailable);\r\n}\r\nexport async function activateStargazerProviders() {\r\n    try {\r\n        if (walletAvailable) {\r\n            const walletProvider = window.stargazer;\r\n            dagProvider = walletProvider.getProvider('constellation');\r\n            await dagProvider.activate();\r\n\r\n            ethProvider = walletProvider.getProvider('ethereum');\r\n            await ethProvider.activate();\r\n            return getSuccessResponse(provider);\r\n        }\r\n        else {\r\n            return getErrorResponse(\"Wallet is not Available\");\r\n        }\r\n    } catch (e) {\r\n        return getErrorResponse(e);\r\n    }\r\n}\r\nexport async function getAddress(providerName) {\r\n    try {\r\n        if (walletAvailable) {\r\n            let provider;\r\n            if (providerName == \"eth_accounts\") {\r\n                provider = ethProvider;\r\n            }\r\n            else if (providerName == \"dag_accounts\") {\r\n                provider = dagProvider;\r\n            }\r\n            const account = await provider.request({ method: providerName, params: [] });\r\n\r\n            return getSuccessResponse(account);\r\n        }\r\n        else {\r\n            return getErrorResponse(\"Wallet is not Available\");\r\n        }\r\n    } catch (e) {\r\n        return getErrorResponse(e);\r\n    }\r\n}\r\nexport async function signConstellation(message, _metadata) {\r\n    try {\r\n        if (walletAvailable) {\r\n            let provider = dagProvider;\r\n\r\n            const signatureRequest = {\r\n                content: message,\r\n                metadata: {}\r\n            };\r\n            const utf8Encode = unescape(encodeURIComponent(JSON.stringify(signatureRequest)));\r\n            const signatureRequestEncoded = window.btoa(utf8Encode);\r\n            const account = await provider.request({ method: 'dag_accounts', params: [] });\r\n            const userAddress = account[0];\r\n            const signature = await provider.request({\r\n                method: 'dag_signMessage',\r\n                params: [userAddress, signatureRequestEncoded]\r\n            });\r\n            const publicKey = await provider.request({ method: 'dag_getPublicKey', params: [userAddress] });\r\n\r\n            // Send your signature trio for further verification\r\n            const payload = { signatureRequestEncoded, signature, publicKey };\r\n            return getSuccessResponse({ signatureRequestEncoded, signature, publicKey });\r\n        } else {\r\n            return getErrorResponse(\"Wallet is not Available\");\r\n        }\r\n    } catch (e) {\r\n        return getErrorResponse(e);\r\n    }\r\n}\r\n"],
  "mappings": ";AAAA,IAAI,kBAAkB;AACtB,IAAI;AACJ,IAAI;AAEJ,SAAS,iBAAiB,GAAG;AACzB,MAAI,WAAW;AAAA,IACX,QAAQ;AAAA,IACR,OAAO,EAAE,UAAU,EAAE,WAAW;AAAA,IAChC,SAAS;AAAA,EACb;AACA,SAAO,KAAK,UAAU,QAAQ;AAClC;AACA,SAAS,mBAAmB,QAAQ;AAChC,MAAI,WAAW;AAAA,IACX;AAAA,IACA,OAAO;AAAA,IACP,SAAS;AAAA,EACb;AACA,SAAO,KAAK,UAAU,QAAQ;AAClC;AAWA,eAAsB,0BAA0B;AAC5C,MAAI,OAAO,WAAW;AAClB,QAAI;AACA,wBAAkB;AAClB,aAAO,mBAAmB,eAAe;AAAA,IAC7C,SAAS,GAAG;AACR,uBAAiB,CAAC;AAAA,IACtB;AAAA,EACJ;AACA,oBAAkB;AAClB,SAAO,mBAAmB,eAAe;AAC7C;AACA,eAAsB,6BAA6B;AAC/C,MAAI;AACA,QAAI,iBAAiB;AACjB,YAAM,iBAAiB,OAAO;AAC9B,oBAAc,eAAe,YAAY,eAAe;AACxD,YAAM,YAAY,SAAS;AAE3B,oBAAc,eAAe,YAAY,UAAU;AACnD,YAAM,YAAY,SAAS;AAC3B,aAAO,mBAAmB,QAAQ;AAAA,IACtC,OACK;AACD,aAAO,iBAAiB,yBAAyB;AAAA,IACrD;AAAA,EACJ,SAAS,GAAG;AACR,WAAO,iBAAiB,CAAC;AAAA,EAC7B;AACJ;AACA,eAAsB,WAAW,cAAc;AAC3C,MAAI;AACA,QAAI,iBAAiB;AACjB,UAAIA;AACJ,UAAI,gBAAgB,gBAAgB;AAChC,QAAAA,YAAW;AAAA,MACf,WACS,gBAAgB,gBAAgB;AACrC,QAAAA,YAAW;AAAA,MACf;AACA,YAAM,UAAU,MAAMA,UAAS,QAAQ,EAAE,QAAQ,cAAc,QAAQ,CAAC,EAAE,CAAC;AAE3E,aAAO,mBAAmB,OAAO;AAAA,IACrC,OACK;AACD,aAAO,iBAAiB,yBAAyB;AAAA,IACrD;AAAA,EACJ,SAAS,GAAG;AACR,WAAO,iBAAiB,CAAC;AAAA,EAC7B;AACJ;AACA,eAAsB,kBAAkB,SAAS,WAAW;AACxD,MAAI;AACA,QAAI,iBAAiB;AACjB,UAAIA,YAAW;AAEf,YAAM,mBAAmB;AAAA,QACrB,SAAS;AAAA,QACT,UAAU,CAAC;AAAA,MACf;AACA,YAAM,aAAa,SAAS,mBAAmB,KAAK,UAAU,gBAAgB,CAAC,CAAC;AAChF,YAAM,0BAA0B,OAAO,KAAK,UAAU;AACtD,YAAM,UAAU,MAAMA,UAAS,QAAQ,EAAE,QAAQ,gBAAgB,QAAQ,CAAC,EAAE,CAAC;AAC7E,YAAM,cAAc,QAAQ,CAAC;AAC7B,YAAM,YAAY,MAAMA,UAAS,QAAQ;AAAA,QACrC,QAAQ;AAAA,QACR,QAAQ,CAAC,aAAa,uBAAuB;AAAA,MACjD,CAAC;AACD,YAAM,YAAY,MAAMA,UAAS,QAAQ,EAAE,QAAQ,oBAAoB,QAAQ,CAAC,WAAW,EAAE,CAAC;AAG9F,YAAM,UAAU,EAAE,yBAAyB,WAAW,UAAU;AAChE,aAAO,mBAAmB,EAAE,yBAAyB,WAAW,UAAU,CAAC;AAAA,IAC/E,OAAO;AACH,aAAO,iBAAiB,yBAAyB;AAAA,IACrD;AAAA,EACJ,SAAS,GAAG;AACR,WAAO,iBAAiB,CAAC;AAAA,EAC7B;AACJ;",
  "names": ["provider"]
}
